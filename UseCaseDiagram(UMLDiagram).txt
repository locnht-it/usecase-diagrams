A. NHẬP MÔN USE CASE DIAGRAM (Mô hình (về) tình huống sử dụng (App của người dùng))

I. KHÁI NIỆM VỀ DIAGRAM - SƠ ĐỒ TRONG QUÁ TRÌNH LÀM PHẦN MỀM

XÂY DỰNG 1 NGÔI NHÀ		    vs.		SO SÁNH VIỆC LÀM PHẦN MỀM

* Kiến trúc sư làm việc với gia chủ		* BA/PO làm việc với khách hàng (gã
						đặt hàng làm app)
- Requirements/yêu cầu của chủ nhà		- Yêu cầu phần mềm - Soft Reqs
- Design/thiết kế để hình dung 			- Thiết kế để hình dung app làm sau này
căn nhà sẽ thi công sau này

> BẢN VẼ PHỐI CẢNH:				> BẢN VẼ USE CASE (USE CASE DIAGRAM)
- Cảm nhận sơ bộ về căn nhà			- Cảm nhận về tính năng, chức năng app sẽ
- Công năng sử dụng (phòng khách,		đem lại cho user/người dùng
ngủ, gara, ...), màu				- Hình dung về app, sản phẩm sẽ làm

> BẢN VẼ KẾT CẤU CĂN NHÀ			> BẢN VẼ (KẾT CẤU) CLASS DIAGRAM
- Kết cấu về kích thước móng, phòng,		- Căn phòng chứa info (id, name, yob, ...)
cột, khẩu độ, cao độ				- BẢN VẼ (KẾT CẤU) ERD/PHYSICAL DATABASE

> BẢN VẼ "ĐỘNG" TRONG CĂN NHÀ			> BẢN VẼ "ĐỘNG/XỬ LÍ" - VẬN HÀNH TRONG APP
- Phong thủy - gió nước trong nhà		- BẢN VẼ ACTIVITY DIAGRAM
- BẢN VẼ ĐIỆN, NƯỚC				- BẢN VẼ SEQUENCE DIAGRAM
						- BẢN VẼ STATE MACHINE DIAGRAM
						- App phải run; run tức là gọi method/hàm/
						hành động giữa các object (OOP)

> ...						> ...

II. UML (UNIFIED MODELING LANGUAGE - NGÔN NGỮ MÔ HÌNH THỐNG NHẤT) VÀ 4 + 1 VIEW

- KHI LÀM PHẦN MỀM, ĐỪNG CHỈ NGHĨ NGAY ĐẾN VIẾT CODE, MÀ SÓNG BẮT ĐẦU TỪ GIÓ, VIẾT APP TỪ AI ĐÓ ĐẶT HÀNG - VIẾT APP BẮT ĐẦU TỪ REQS
- VÀ NGHĨ ĐẾN VIỆC THIẾT KẾ, PHÁC THẢO, VẼ RA NHỮNG GÓC NHÌN VỀ APP ĐỂ ĐÁNH GIÁ TRƯỚC KHI VIẾT CODE: góc nhìn UI, góc nhìn DB, góc nhìn Class, kiến trúc MVC, MVC2, Micro Services, API

- VẬY VẼ BAO NHIÊU LOẠI MÔ HÌNH LÀ ĐỦ? CÁC CTY LOẠN LẠC TRONG VIỆC DÙNG CÁC LOẠI MÔ HÌNH KHÁC NHAU -> HỌP BÀN, VÀ RA NGHỊ QUYẾT, THỐNG NHẤT VÕ LÂM, THỐNG NHẤT CÁC TRƯỜNG PHÁI VẼ HÌNH THIẾT KẾ PHẦN MỀM -> UML RA ĐỜI GỒM HƠN 10 LOẠI SƠ ĐỒ KHÁC NHAU; DÙNG ĐỂ MÔ TẢ TOÀN BỘ GÓC NHÌN VỀ APP -> KỂ TỪ NGÀY ĐÓ, GIANG HỒ KHI LÀM APP DÙNG UML ĐỂ VẼ THIẾT KẾ APP (KO CÓ UI) - NHÌN APP TỪ NGOÀI (USE CASE) ĐẾN TÍT BÊN TRONG (CLASS, CLASS GỌI NHAU RA SAO, PACKAGE/NAMESPACE)

- GOM NHÓM CÁC SƠ ĐỒ NÀY THÀNH 4 + 1 VIEW - LÀ CÁCH TA NHÌN CÁI APP THEO 5 KHUNG NHÌN KHÁC NHAU (tương tự như góc nhìn giới tính, góc nhìn độ tuổi, ...)

*** 4 + 1 VIEW 
* 1 View: 
- Scenario View: góc nhìn từ người ngoài nhìn vào app 
* 4 View:
- Logical View: góc nhìn thiết kế cấu trúc, có các class nào, cấu trúc gì
- Process View: các class xử lí qua lại với nhau như thế nào
- Implementation View: chia code thành các Package, API như thế nào
- Physical View: góc nhìn về việc sử dụng, triển khai, cần đồ chơi gì để triển khai (docker, ...) 
***

III. USE CASE DIAGRAM

1. ĐỊNH NGHĨA

- Là sơ đồ LIỆT KÊ các tính năng của phần mềm sẽ làm cho khách hàng
  Tính năng: TÊN của các màn hình mà khi xài màn hình này, giúp cho user làm được
	     1 việc gì đó
- Là sơ đồ LIỆT KÊ các chức năng, functional reqs, user stories
- Là sơ đồ LIỆT KÊ các chức năng, và các user - (GỌI TÊN MỚI LÀ ACTOR) và sự tương tác giữa USER và TÍNH NĂNG
- Là sơ đồ LIỆT KÊ XEM AI (USER) DÙNG TÍNH NĂNG GÌ (CỦA APP)
  CÁCH HÀNH XỬ CỦA NGƯỜI DÙNG VỚI APP - TUI XÀI TÍNH NĂNG GÌ - USER BEHAVIOUR
  
[NẾU KO VẼ USE CASE DIAGRAM THÌ TA LIỆT KÊ CÁC CHỨC NĂNG, TÍNH NĂNG, TÊN MÀN HÌNH TRÊN GIẤY KIỂU GẠCH ĐẦU DÒNG] 

2. CÁC THÀNH PHẦN TẠO NÊN SƠ ĐỒ USE CASE (UCD)

2.1 SYSTEM BOUNDARY

- Là 1 hình chữ nhật, có tên app ở phía trên cùng, biểu diễn biên giới của app, khoanh vùng đâu là app (có tính năng) và đâu là bên ngoài app - môi trường bên ngoài, nó sẽ làm nổi bật lên khái niệm: user tương tác với app 
- Dùng để xác định scope bài toán!!! NHỮNG TÍNH NĂNG SẼ ĐƯỢC CUNG CẤP CHO USER
- BÊN TRONG HÌNH CHỮ NHẬT LÀ CÁC TÍNH NĂNG/TÊN CÁC MÀN HÌNH MÀ USER SẼ CHẠM XÀI
- MUỐN APP LÀM GÌ, HỨA RẰNG APP SẼ LÀM GÌ, THÌ CÁI HỨA ĐÓ PHẢI VẼ TRONG HÌNH CHỮ NHẬT
- Bên ngoài HCN là môi trường của Actor tác động vào app, xài tính năng app

2.2 ACTOR - TÁC NHÂN - NHÂN TỐ TÁC ĐỘNG VÀO APP, VÀO TÍNH NĂNG ĐỂ TÍNH NĂNG RUN

- LÀ NGƯỜI DÙNG, GÃ SẼ XÀI APP, ĐỨNG BÊN NGOÀI APP/BÊN NGOÀI BOUNDARY
 + Nhập info
 + Click chuột
 + Nhận output màn hình

- LÀ MỘT APP KHÁC!!! MÀ CÓ TƯƠNG TÁC VỚI APP CHÚNG TA (HCN) THEO KIỂU GỬI/NHẬN INFO
 + App khác có thể đưa data vào app mình, hoặc app mình có thể gửi data cho app khác
 + Momo, VNPay, Gmail, API từ app nào khác ...
 + App cũ, app cty đang dùng, và app ta là module mới đc viết thêm, chạy độc lập, 
   nhưng cần tương tác, đồng bộ với app cũ/app legacy này
   -> ĐÔI KHI TRONG THỰC TẾ, TA KO CẦN VẼ NHỮNG LOẠI APP QUÁ NỔI TIẾNG, QUÁ QUEN KIỂU MOMO,
      GMAIL, FB, GHTK VÌ CÁI TÊN CỦA USE CASE ĐÃ BAO HÀM Ý NGHĨA RẰNG APP MÌNH CẦN PHẢI GỌI
      APP BÊN THỨ 3, BIẾT TRƯỚC SẼ ĐI RA NGOÀI APP MÌNH, BỎ BỚT ACTOR NỔI TIẾNG, QUEN CHO 
      ĐỠ RỐI SƠ ĐỒ NHƯNG VẪN KO LÀM MẤT ĐI NGỮ NGHĨA APP CẦN RA BÊN NGOÀI
   -> NHƯNG TA CẦN VẼ APP MÌNH NỐI VỚI APP LEGACY/AS IS SYSTEM MÀ CTY, DOANH NGHIỆP VẪN 
      ĐANG XÀI. PHẢI VẼ ĐỂ TA/DEV TEAM CÓ Ý THỨC BIẾT RẰNG GIAO TIẾP VỚI 1 APP KO 
      NỔI TIẾNG, INTERNAL LÀ CÂU CHUYỆN QUAN TRỌNG ĐỂ KO GIÁN ĐOẠN CÁCH MÀ DOANH NGHIỆP/
      KHÁCH HÀNG ĐANG VẬN HÀNH CÔNG VIỆC CỦA HỌ. GIAO TIẾP VỚI HỆ THỐNG CŨ THÌ KO ĐƠN GIẢN
      DO KO CHUẨN HÓA
   -> TA CHỈ NÊN TẬP TRUNG VẼ ACTOR DẠNG USER/NGƯỜI DÙNG XÀI APP, LEGACY SYSTEM

- LÀ 1 THIẾT BỊ/DEVICE KHÁC MÀ CÓ TƯƠNG TÁC VỚI APP CHÚNG TA (HCN) THEO KIỂU GỬI/NHẬN INFO
 + Hệ thống nhúng, cơ điện tử, cảm biến, camera cũng là những thứ mà có (chủ yếu) gửi info 
   vào app, nó kích hoạt app xử lí info, vậy nó cũng đc xem là ACTOR
 + CŨNG GIỐNG NHƯ TRÊN, TUỲ NGỮ CẢNH CẦN LÀM RÕ CÁC THIẾT BỊ THÌ TA VẼ CAMERA, CẢM BIẾN...
   LÀ 1 ACTOR, CÒN NẾU TÊN USE CASE ĐÃ RÕ, BAO HÀM LUÔN CÁI THIẾT BỊ, THÌ KO CẦN VẼ RA

- LÀ 1 CON CRON/TIẾN TRÌNH KHIẾN APP CHẠY TỰ ĐỘNG THEO KHUNG GIỜ, THEO NGƯỠNG DATA NÀO ĐÓ
 + TRONG APP CỦA TA NẾU CÓ Ý ĐỊNH LÀM 1 TÍNH NĂNG TỰ ĐỘNG: 
   ĐẾN NGƯỠNG NÀO ĐÓ: NGƯỠNG DATA, NGƯỠNG THỜI GIAN
			APP TỰ CHAY 1 TÍNH NĂNG THEO NGƯỠNG NÀO ĐÓ
   GIỐNG NHƯ CỨ ĐẾN NGƯỠNG THÌ CÓ NGƯỜI NÀO KÍCH HOẠT TÍNH NĂNG X CHẠY
   VÍ DỤ: APP ĐẶT LỊCH HẸN, HẸN 3 GIỜ, CHUÔNG REO, 
				3 GIỜ CHUÔNG REO THẬT - CHUÔNG REO TỰ ĐỘNG THEO 3 GIỜ
   1 TÍNH NĂNG CHẠY NẾU CÓ "AI ĐÓ" TÁC ĐỘNG, Ở ĐÂY KO CÓ NGƯỜI NÀO LÀM CHUÔNG REO CẢ
				HỆ THỐNG LÀM CHUÔNG REO LÚC 3 GIỜ
				HỆ THỐNG CHÍNH LÀ ĐOẠN CODE TA VIẾT, CHẠY THƯỜNG TRỰC/LIÊN
				TỤC, CHẠY NGẦM, ĐÓNG VAI TRÒ NGƯỜI THEO DÕI NGƯỠNG
				ĐOẠN CODE ĐÓNG VAI NGƯỜI THEO DÕI NGƯỠNG/MỨC NÀO ĐÓ VÀ 
					KÍCH HOẠT 1 TÍNH NĂNG
   CODE THAY NGƯỜI KÍCH HOẠT TÍNH NĂNG -> ĐOẠN CODE NÀY ĐC XEM LÀ 1 ACTOR
   AI LÀM APP CHẠY, THÌ KẺ ĐÓ LÀ ACTOR, CODE MÌNH LÀM APP TỰ CHẠY TÍNH NĂNG NÀO ĐÓ
   ĐOẠN CODE NÀY GỌI LÀ ACTOR LUÔN, ACTOR NÀY ĐC ĐẶT TÊN LÀ: SYSTEM HANDLER
   THEO NGÔN NGỮ GIANG HỒ, ĐOẠN CODE KHIẾN APP TỰ CHẠY, SYSTEM HANDLER ĐC GỌI LÀ CON CRON,
   							BACKGROUND JOB, DEAMON

   NGƯỠNG/MỨC ĐỂ KHIỂN APP TỰ CHẠY 1 CHỨC NĂNG NÀO ĐÓ: THƯỜNG LÀ THỜI GIAN, 
						       ĐIỂM SỐ TÍCH LŨY, DOANH SỐ MUA
						       CON SỐ MÌNH MUỐN ĐẾN NGƯỠNG NÀO ĐÓ
						       THÌ APP LÀM GÌ
   VÍ DỤ: APP HẸN GIỜ, HẸN EVENT, LẬP LỊCH, TỰ ĐỘNG NOTIFY, REMINDER
	  ĐƠN HÀNG QUÁ HẠN 24H CHƯA THANH TOÁN -> TỰ HỦY
	  ĐẠT DOANH SỐ MUA 10M TỰ ĐỘNG GỬI NOTI, KHUYẾN MÃI...THEO SETTING CHO TRƯỚC
	  24H ĐÊM THỨ 2 4 6 LÊN WEBSITE CỦA TGDĐ, CELLPHONES S,... CÀO DATA VỀ DB

- Khi làm 1 app bất kì, hãy suy nghĩ về 1 "loại user" mà ko cần login gì cả, ko cần chứng thực gì cả mà vẫn xài được 1 nhóm tính năng nào đó. Vào web app XYZ nào đó, ko cần login, ko cần là member mà sử dụng đc trang/page/tính năng nào đó, ví dụ: search, filter, view details, view category...
 -> NẾU CHO PHÉP NGƯỜI DÙNG TRẢI NGHIỆM TÍNH NĂNG MÀ KO CẦN XÁC THỰC DANH TÍNH, 
    GÃ XÀI APP MÀ KO CẦN CHỨNG MINH DANH TÍNH -> GỌI LÀ GUEST/VISITOR

 -> NGƯỢC LẠI CỦA NHỮNG GÃ KO CÓ DANH TÍNH, KO CẦN DANH TÍNH, THÌ LÀ NHỮNG NGƯỜI DÙNG CÓ DANH TÍNH, VÀ PHẢI LOGIN ĐỂ ĐC LÀM NHỮNG VIỆC GÌ KHÁC (SO VỚI GUEST). GÃ XÀI APP MÀ CÓ ĐỂ LẠI DANH TÍNH/LOGIN, THÌ GỌI CHUNG LÀ: REGISTERED USER - GÃ CÓ ACCOUNT, VÀ CÓ LOGIN ĐỂ DÙNG APP -> REGISTERED USER: CHA CỦA 1 NHÓM USER STUDENT, LECTURER, ACADEMIC STAFF, MANAGER, CASHIER, DOCTOR, ... -> dùng generalization cho những tính năng dùng chung cho 1 đám user

     CHO DÙ CÓ LOGIN, HAY KO THÌ BẤT CỨ AI XÀI APP ĐỀU ĐC GỌI CHUNG LÀ USER
 
   

>>>>> CÚ PHÁP ĐẶT TÊN ACTOR: NOUN - DANH TỪ
		             NẾU LÀ NGƯỜI DÙNG/CON NGƯỜI XÀI APP THÌ ĐẶT TÊN THEO ROLE, 
		             KO THEO TÊN CỦA CÁ NHÂN CỤ THỂ

> Ví dụ: App FAP có tui, bạn Toàn, bạn Phú 
		    tui -> Tấn Lộc
	 Actor với FAP thì sẽ là: LECTURER 
		   FAP thì sẽ là: STUDENT

>>>>> KÍ HIỆU: HÌNH NGƯỜI QUE

>>>>> GHI CHÚ CHO ACTOR MÀ LÀ CON NGƯỜI (NÓI THEO ROLE)
- Nhìn ở góc nhìn data trong app sau này, thì có 2 loại user
  USER THƯỜNG: CẦN UI ĐẸP LUNG LINH; ĐÔNG NHƯNG ÍT CÓ QUYỀN CRUD DATA
				     (Create/Retrieve/Update/Delete)
	       ĐEM LẠI DOANH THU CHO APP
	       > student, lecturer

  USER QUẢN TRỊ: HẬU TRƯỜNG, UI KO CẦN LUNG LINH, ÍT, NHƯNG CÓ QUYỀN SINH SÁT DATA, 
		 CRUD MẠNH, TẠO DATA SẴN DÙNG CHO USER THƯỜNG
		 > admin, academic staff, chủ-shop, chủ-sàn

2.3 USE CASE - TÌNH HUỐNG SỬ DỤNG APP/XÀI APP 

- Tên gọi của 1 tính năng mà app sẽ cung cấp cho actor/user/người dùng
- Tên gọi của 1 màn hình mà sẽ làm điều gì đó, xử lí điều gì đó cho user
- Tên gọi của 1 functional req, user story

* KÍ HIỆU: HÌNH ELIP, OVAL
* CÚ PHÁP: VERB + OBJECT, TÍNH NĂNG LÀ HÀNH ĐỘNG, NÊN PHẢI LÀ ĐỘNG TỪ
	   CẤM TUYỆT ĐỐI TRONG SƠ ĐỒ CÓ USE CASE TRÙNG TÊN NHAU!!!
	   (trùng UC chính là trùng tính năng)
	   1 UC CÓ THỂ ĐƯỢC NHIỀU ACTOR NHÀO VÀO DÙNG, 1 TÍNH NĂNG CÓ THỂ HỖ TRỢ CHO N USER

2.4 RELATIONSHIP/LINK - NÉT NỐI, MỐI QUAN HỆ GIỮA 2 THÀNH PHẦN ACTOR & USE CASE

2.4.1 ASSOCIATION

- Nét nối thẳng, nối giữa Actor và Use Case, hàm ý rằng user X xài tính năng Y
- Xài: gửi/nhập info vào app, hoặc nhận info từ app (direct user và indirect user)

2.4.2 GENERALIZATION - KẾ THỪA - IS A, TAM GIÁC RỖNG ---------|>

2.4.2.1 GIỮA CÁC ACTOR XÀI CHUNG TÍNH NĂNG

* DÙNG ĐỂ NỐI GIỮA ACTOR VỚI ACTOR ĐỂ NÓI RẰNG CÁC ACTOR CÓ DÙNG CHUNG 1 CỤM TÍNH NĂNG NÀO ĐÓ, TA ĐẶT RA ACTOR CHA, ACTOR CON ĐỂ GIẢM NÉT NỐI VÀO TRONG USE CASE
  "TAO XÀI ĐƯỢC 5 TÍNH NĂNG NHƯ MÀY, VÀ CÒN HƠN THẾ NỮA"
	TAO KẾ THỪA MÀY -----------|> MÀY
  >>>>>TUI, ÔNG, BẠN - ACTOR SHARE CHUNG, XÀI CHUNG NHIỀU TÍNH NĂNG

- Nét tam giác rỗng hướng từ Con về Cha
- Con -----------------|> Cha
	generalization
  "Con làm được tất cả những gì Cha đang làm, và còn hơn thế nữa"
				inherit			khác Cha - extends (Java)
- MUỐN CHƠI KẾ THỪA, TA TÌM MỐI LIÊN HỆ GIỮA CÁC OBJECT, VÀ ĐỌC ĐƯỢC CÂU "IS - A" 1 CHIỀU
  Vd: Dog is a kind of Pet	Dog -----------|> Pet
      Cat is a kind of Pet	Cat -----------|> Pet
			Chó Mèo là dạng Pet, Pet là chung chung hơn - generalization
					     Cat, Dog cụ thể hơn 
      >>>>> Đọc 1 chiều, ko đọc chiều ngược lại
      Hình vuông là 1 dạnh HCN, đọc ngược lại gẫy	HV -------|> HCN

      KẾ THỪA -> GOM KHÁI NIỆM CHUNG CHUNG VỀ CHA - GENERALIZATION, IS A 1 CHIỀU

	- Student làm đc: login, manage profile, view timetable, view attendance, [feeback, read news...]
	- Lecturer làm đc: login, manage profile, view timetable, view attendance, [check attendance...]
	- Academic staff làm đc: login, manage profile, view timetable, view attendance, [create timetable, open class...]

	-> REGISTERED USER làm đc login, manage profile, view timetable, view attendance, 
   	   user có account thì phải làm đc (nhân tử chung)

		STUDENT: [feeback, read news...]
		LECTURER: [check attendance...]
		ACADEMIC STAFF: [create timetable, open class...]

2.4.2.2 GIỮA CÁC USE CASE MÀ LẠI ĐỌC ĐƯỢC CÂU IS A 1 CHIỀU

- KẾ THỪA CÒN ĐƯỢC DÙNG GIỮA CÁC USE CASE VỚI NHAU!!! KHI GIỮA CÁC USE CASE VỚI NHAU TA LẠI ĐỌC ĐƯỢC CÂU IS A 1 CHIỀU
- KẾ THỪA GIỮA CÁC USE CASE MANG Ý NGHĨA: GOM CỤM TÍNH NĂNG, NHỮNG TÍNH NĂNG SHARE ĐIỂM CHUNG/HAY CÙNG THAO TÁC TRÊN CÁC OBJECT (thêm xóa sửa timetable)
- HAY DÙNG ĐỂ LÀM MENU PHẦN ADMIN

- CÔNG THỨC CHUNG CHO ĐÁM USE CASE SHARE CHUNG INFO/OBJECT/MỤC ĐÍCH
	(MANAGE X: items, products, orders, users, posts...)
		<|---------- CRUD X
		<|---------- (Create)
		<|---------- (Update)
		<|---------- (Delete)
  >>>>> GOM NHÓM CHỨC NĂNG, TẠO MENU ADMIN

  Ví dụ 1: TAO ĐI GIAO DỊCH Ở NGÂN HÀNG
  - Tao đi đóng tài khoản
  - Tao đi mở tài khoản
  - Tao đi chuyển tiền				ĐỀU LÀ 1 DẠNG GIAO DỊCH NGÂN HÀNG
  - Tao đi cập nhật thông tin tài khoản		TỔNG QUÁT CHO ĐÁM CỤ THỂ BÊN KIA
  - Tao đi tra soát giao dịch			TỔNG QUÁT/CHA/GENERALIZATION

- KẾ THỪA: LÀ SỰ PHÂN LOẠI, GOM NHÓM USER/ACTOR, GOM NHÓM CHỨC NĂNG (IS A 1 CHIỀU)
 + (Close account)
 + (Open a new account)
 + (Transfer money)		----------|> (Make bank transaction)
 + (Update account info)
 + (Check balance) 

 + (View timetable)
 + (Update timetable)	IS A KIND OF
 + (Create timetable)	--------------|> (Manage timetable)
 + (Close timetable) 
      4 công việc nhỏ lẻ đều có liên quan timetable -> gọi chung là QUẢN LÍ THỜI KHÓA BIỂU
	QUẢN LÍ TKB ĐẠI DIỆN CHO CẢ ĐÁM DETAIL BÊN TRÁI
		IS A KIND OF

2.4.3 INCLUDE: ~ #include trong C, import trong Java, using trong C#

- SỰ PHỤ THUỘC GIỮA 2 USE CASE, PHỤ THUỘC CỰC KÌ CHẶT CHẼ, SỐNG CÒN
- Actor ---------- (Base Use Case/UC chính) ---- <<include>> ----> (Inclusion/Included UC)
- <<include>> đọc từ GỐC MŨI TÊN, GỐC MŨI TÊN là UC chính. Ngọn chính là dependency, thứ cần để hoàn tất Base/UC chính

- BASE MUỐN HOÀN TẤT, MUỐN XONG, BẮT BUỘC PHẢI CÓ INCLUDED ĐƯA VÀO
  "Nhảy mũi" muốn xong, thành công thì ko thể thiếu "Nhắm mắt" - PHỤ THUỘC SIÊU CHẶT CHẼ VỀ VÒNG ĐỜI TỒN TẠI

2.4.4 EXTEND: ~ switch case, option

- SỰ PHỤ THUỘC GIỮA 2 USE CASE, PHỤ THUỘC LỎNG LẺO, TỒN TẠI ĐỘC LẬP
- Actor --------- (Base Use Case/UC chính/Extended) <---- <<extend>> ---- (Extending UC)
- <<extend>> đọc từ NGỌN mũi tên, NGỌN MŨI TÊN LÀ UC CHÍNH, GỐC MŨI TÊN LÀ THẰNG LỎNG LẼO, PLUGIN OPTION, THỨ CẮM VÀO HỖ TRỢ, KO CÓ CHẲNG SAO, CƠM THÊM
- KO CẦN EXTENDING, BASE VẪN CÓ THỂ XONG VIỆC, 2 THẰNG ĐỘC LẬP, BASE HOÀN TẤT MÀ CHẲNG CẦN EXTENDING CŨNG ĐƯỢC
  "Nhảy mũi thành công" ko thèm xin lỗi, có thể xin lỗi!!! 	 

=========================================================================================

B. USE CASE DESCRIPTION/SPECIFICATION: BẢN ĐẶC TẢ/MÔ TẢ CHI TIẾT VỀ USE CASE

- 1 Use Case (hình elipse) đại diện cho tên gọi của 1 màn hình, 1 chức năng, 1 tính năng, 1 fuctional requirement (yêu cầu chức năng), feature, 1 user story, goal, target, what, verb + object, là xử lí, giúp cho người dùng app đạt được 1 kết quả/giá trị nào đó trong công việc của họ khi họ xài app mình viết
Vd: (create an order) (send noti) (book a tour)...

- 1 UC ĐỦ DỄ HIỂU VỚI NGƯỜI DÙNG (VẼ HỨA HẸN THỨ USER SẼ TRẢI NGHIỆM), DEV TEAM (1 MÀN HÌNH CẦN CÀI/LÀM/IMPLEMENT) VÌ NÓ NÓI ĐC MỤC ĐÍCH, KẾT QUẢ!!!

- NHƯNG VỚI DEV TEAM. DỄ HIỂU NHƯNG VẪN CẦN PHẢI MÔ TẢ CHI TIẾT THÊM VỀ BÊN TRONG USE CASE,
HÀNH TRÌNH VẬN HÀNH CỦA USE CASE, CÂU CHUYỆN, HOẠT ĐỘNG DIỄN RA SAU <TÊN USE CASE> ĐỂ GIÚP ÍCH CHO QUÁ TRÌNH VIẾT CODE/IMPLEMENTATION

- 1 UC QUA TÊN GỌI ĐỦ DỄ HIỂU VỀ ĐÍCH ĐẾN NHƯNG RẤT MƠ HỒ/KO CỤ THỂ/CHUNG CHUNG VỀ HÀNH TRÌNH/STEP/CÂU CHUYỆN. ĐỂ CÂU CHUYỆN USE CASE DIỄN RA THÀNH CÔNG, DÂN DEV KO BIẾT CHÍNH XÁC NÊN LÀM ĐIỀU GÌ ĐỂ HIỆN THỰC HÓA TÍNH NĂNG/UC CHO USER, ĐỦ DỄ HIỂU, NHƯNG MƠ HỒ KHI IMPLEMENT

- NGOÀI USE CASE DIAGRAM, CẦN THÊM 1 CÁI TÀI LIỆU MÔ TẢ CHI TIẾT CÁCH 1 USE CASE HÀNH XỬ, VẬN HÀNH STEPS TO GOTO THE GOAL/TARGET, CÁC BƯỚC MÀ USER, KỊCH BẢN, CÂU CHUYỆN MÀ USER XÀI ĐƯỢC TÍNH NĂNG/MÀN HÌNH ĐẠT ĐC KẾT QUẢ MONG ĐỢI

- TÀI LIỆU DIỄN GIẢI CHI TIẾT CÁCH HÀNH XỬ CỦA 1 USE CASE (GIÚP DÂN DEV IMPLEMENT), TÀI LIỆU NÀY ĐC GỌI TÊN LÀ USE CASE DESCRIPTION, SPECIFICATION
  > NÓ LÀ 1 TABLE CÓ FORMAT ĐỊNH SẴN BỞI "GIANG HỒ" CHỨA NHIỀU MỤC MÀ DÂN BA (BUSINESS
    ANALYST) PHẢI ĐIỀN VÀO ĐỂ KỂ RÕ CÂU CHUYỆN HÀNH XỬ CỦA USE CASE GIÚP USER ĐẾN ĐÍCH	
  > MỖI USE CASE, ELIPSE, CÓ 1 TABLE TƯƠNG ỨNG ĐỂ MÔ TẢ!!!
    USE CASE DIAGRAM CHỨA 50 USE CASES, BẠN CÓ 50 TABLE TƯƠNG ỨNG -> CÔNG VIỆC DỄ NẢN!!!

